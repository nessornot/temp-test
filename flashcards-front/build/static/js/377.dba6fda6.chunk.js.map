{"version":3,"file":"static/js/377.dba6fda6.chunk.js","mappings":"uLAGe,SAASA,EAAIC,GAAmD,IAAlD,MAAEC,EAAK,SAAEC,EAAQ,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,GAAUL,EACxE,MAAMM,EAAoBA,CAACC,EAAOC,KAC9BJ,EAASH,EAAOM,EAAOC,EAAM,EAGjC,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SAAEV,EAAQ,KACtCW,EAAAA,EAAAA,KAAA,UAAQF,UAAU,eAAeG,QAASA,IAAMR,EAASJ,GAAQa,KAAK,SAAQH,UAC1EC,EAAAA,EAAAA,KAAA,OAAKG,IAAI,sBAAsBC,IAAI,sGAG3CP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLJ,UAAU,iBACVO,YAAY,IACZT,MAAON,EACPE,SAAWc,GAAMZ,EAAkB,WAAYY,EAAEC,OAAOX,OACxDY,UAAQ,KAEZR,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,SAAC,6CAE1CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLJ,UAAU,eACVO,YAAY,IACZT,MAAOL,EACPC,SAAWc,GAAMZ,EAAkB,SAAUY,EAAEC,OAAOX,OACtDY,UAAQ,KAEZR,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,SAAC,+EAK1D,C,sBClCe,SAASU,IACpB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,CAAC,CAAExB,SAAU,GAAIC,OAAQ,OACrD0B,EAAYC,IAAiBJ,EAAAA,EAAAA,WAAS,GACvCK,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACFX,IACAQ,GAAc,IACdI,EAAAA,EAAAA,IAAYZ,GAAIa,MAAMC,IAClBX,EAASW,EAAKZ,OACd,MAAMa,EAAiBC,OAAOC,QAAQH,EAAKT,OAAOa,KAAIxC,IAAA,IAAEyC,EAAGC,GAAE1C,EAAA,MAAM,CAC/DE,SAAUuC,EACVtC,OAAQuC,EACX,IACDd,EAASS,EAAe,IACzBM,OAAM,KACLC,MAAM,gJAA6B,IAE3C,GACD,CAACtB,IAEJ,MAAMuB,EAAmBA,CAAC5C,EAAOM,EAAOC,KACpC,MAAMsC,EAAU,IAAInB,GACpBmB,EAAQ7C,GAAOM,GAASC,EACxBoB,EAASkB,EAAQ,EAOfC,EAAc9C,IAChB,MAAM6C,EAAUnB,EAAMqB,QAAO,CAACC,EAAGC,IAAMA,IAAMjD,IAC7C2B,EAASkB,EAAQ,EA6BrB,OACErC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,KACP1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BC,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,KACR3C,EAAAA,EAAAA,MAAA,QAAMC,UAAU,oBAAoB2C,SA/BzBC,UACjBpC,EAAEqC,iBAEF,MAAMC,EAAO,CACThC,QACAG,MAAOW,OAAOmB,YAAY9B,EAAMa,KAAIkB,GAAQ,CAACA,EAAKxD,SAAUwD,EAAKvD,YAGrE,IACQ0B,SACM8B,EAAAA,EAAAA,IAAWrC,EAAIkC,GACrBZ,MAAM,oFACNb,EAAS,oBAEH6B,EAAAA,EAAAA,IAASJ,GACfZ,MAAM,wEACNnB,EAAS,IACTG,EAAS,CAAC,CAAE1B,SAAU,GAAIC,OAAQ,MAClC4B,EAAS,YAEjB,CAAE,MACEa,MAAM,uHACV,GASiEjC,SAAA,EACvDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAAC,8GAG/BC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,iBAAiBI,KAAK,SAAQH,SAAC,mIAIrDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACIE,KAAK,OACLG,YAAY,iGACZT,MAAOgB,EACPpB,SAAWc,GAAMO,EAASP,EAAEC,OAAOX,OACnCY,UAAQ,EACRV,UAAU,yBAMdD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,UAAQa,GAAG,aAAaZ,UAAU,oBAAmBC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,OAAKG,IAAI,kBAAkBC,IAAI,KAAI,qFAGvCP,EAAAA,EAAAA,MAAA,UAAQa,GAAG,eAAeZ,UAAU,oBAAmBC,SAAA,EACnDC,EAAAA,EAAAA,KAAA,OAAKG,IAAI,oBAAoBC,IAAI,KAAI,gIAKhDW,EAAMa,KAAI,CAACkB,EAAMzD,KACdW,EAAAA,EAAAA,KAACb,EAAI,CAEDE,MAAOA,EACPC,SAAUwD,EAAKxD,SACfC,OAAQuD,EAAKvD,OACbC,SAAUyC,EACVxC,SAAU0C,GALL9C,MAQbW,EAAAA,EAAAA,KAAA,UAAQC,QAnFNgD,KACZjC,EAAS,IAAID,EAAO,CAACzB,SAAU,GAAIC,OAAQ,KAAK,EAkFbQ,SAAC,8GAO5C,C","sources":["components/Card/Card.jsx","pages/CreateSet/CreateSet.js"],"sourcesContent":["import React from 'react';\nimport './Card.scss';\n\nexport default function Card({ index, question, answer, onChange, onRemove }) {\n    const handleInputChange = (field, value) => {\n        onChange(index, field, value);\n    };\n\n    return (\n        <div className=\"card\">\n            <div className=\"card__nav\">\n                <div className=\"card__index\">{index + 1}</div>\n                <button className=\"card__delete\" onClick={() => onRemove(index)} type=\"button\">\n                    <img src=\"/img/deleteCard.svg\" alt=\"Удалить карточку\"/>\n                </button>\n            </div>\n            <div className=\"card__content\">\n                <div className=\"card__input__wrapper\">\n                    <input\n                        type=\"text\"\n                        className=\"card__question\"\n                        placeholder=\"_\"\n                        value={question}\n                        onChange={(e) => handleInputChange('question', e.target.value)}\n                        required\n                    />\n                    <div className=\"card__input__caption\">ТЕРМИН</div>\n                </div>\n                <div className=\"card__input__wrapper\">\n                    <input\n                        type=\"text\"\n                        className=\"card__answer\"\n                        placeholder=\"_\"\n                        value={answer}\n                        onChange={(e) => handleInputChange('answer', e.target.value)}\n                        required\n                    />\n                    <div className=\"card__input__caption\">ОПРЕДЕЛЕНИЕ</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport Header from \"../../components/Header/header\";\nimport SideBar from \"../../components/SideBar/SideBar\";\nimport './CreateSet.scss'\nimport Card from \"../../components/Card/Card\";\nimport {getDeckById, saveDeck, updateDeck} from \"../../services/deck\";\nimport {useNavigate, useParams} from \"react-router-dom\";\n\nexport default function CreateSet() {\n    const { id } = useParams(); // getting id if editing\n    const [title, setTitle] = useState('');\n    const [cards, setCards] = useState([{ question: '', answer: '' }]);\n    const [isEditMode, setIsEditMode] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (id) {\n            setIsEditMode(true);\n            getDeckById(id).then((deck) => {\n                setTitle(deck.title);\n                const formattedCards = Object.entries(deck.cards).map(([q, a]) => ({\n                    question: q,\n                    answer: a\n                }));\n                setCards(formattedCards);\n            }).catch(() => {\n                alert(\"Не удалось загрузить набор\");\n            });\n        }\n    }, [id]);\n\n    const handleCardChange = (index, field, value) => {\n        const updated = [...cards];\n        updated[index][field] = value;\n        setCards(updated);\n    };\n\n    const addCard = () => {\n        setCards([...cards, {question: '', answer: ''}]);\n    };\n\n    const removeCard = (index) => {\n        const updated = cards.filter((_, i) => i !== index);\n        setCards(updated);\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const data = {\n            title,\n            cards: Object.fromEntries(cards.map(card => [card.question, card.answer]))\n        };\n\n        try {\n            if (isEditMode) {\n                await updateDeck(id, data);\n                alert(\"Набор обновлён!\");\n                navigate('/library');\n            } else {\n                await saveDeck(data);\n                alert(\"Набор создан!\");\n                setTitle('');\n                setCards([{ question: '', answer: '' }]);\n                navigate('/library');\n            }\n        } catch {\n            alert(\"Ошибка при сохранении\");\n        }\n    };\n\n\n    return (\n      <div className=\"createset\">\n          <Header />\n          <div className=\"createset__content\">\n              <SideBar />\n              <form className=\"createset__module\" onSubmit={handleSubmit}>\n                  <div className=\"module__header__row\">\n                      <div className=\"module__title\">\n                          Создать новый набор\n                      </div>\n                      <button className=\"module__create\" type=\"submit\">\n                          Создать и практиковать\n                      </button>\n                  </div>\n                  <div className=\"module__info__column\">\n                      <input\n                          type=\"text\"\n                          placeholder=\"Введите название...\"\n                          value={title}\n                          onChange={(e) => setTitle(e.target.value)}\n                          required\n                          className=\"module__info__input\"\n                      />\n\n                      {/*<input type=\"text\" placeholder=\"Введите описание...\"*/}\n                      {/*       className=\"module__info__input\"/>*/}\n\n                      <div className=\"module__info__row\">\n                          <button id=\"btn-import\" className=\"module__info__btn\">\n                              <img src=\"/img/import.svg\" alt=\"\"/>\n                              Импортировать\n                          </button>\n                          <button id=\"btn-aicreate\" className=\"module__info__btn\">\n                              <img src=\"/img/aicreate.svg\" alt=\"\"/>\n                              Создать из конспектов\n                          </button>\n                      </div>\n                  </div>\n                  {cards.map((card, index) => (\n                      <Card\n                          key={index}\n                          index={index}\n                          question={card.question}\n                          answer={card.answer}\n                          onChange={handleCardChange}\n                          onRemove={removeCard}\n                      />\n                  ))}\n                  <button onClick={addCard}>\n                      добавить карточку\n                  </button>\n              </form>\n          </div>\n      </div>\n    );\n}"],"names":["Card","_ref","index","question","answer","onChange","onRemove","handleInputChange","field","value","_jsxs","className","children","_jsx","onClick","type","src","alt","placeholder","e","target","required","CreateSet","id","useParams","title","setTitle","useState","cards","setCards","isEditMode","setIsEditMode","navigate","useNavigate","useEffect","getDeckById","then","deck","formattedCards","Object","entries","map","q","a","catch","alert","handleCardChange","updated","removeCard","filter","_","i","Header","SideBar","onSubmit","async","preventDefault","data","fromEntries","card","updateDeck","saveDeck","addCard"],"sourceRoot":""}