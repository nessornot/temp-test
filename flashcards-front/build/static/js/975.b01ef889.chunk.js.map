{"version":3,"file":"static/js/975.b01ef889.chunk.js","mappings":"wJAGA,MAaA,EAbuBA,IAAmB,IAAlB,SAAEC,GAAUD,EAChC,MAAME,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,KACQC,aAAaC,QAAQ,aAE/BJ,EAAS,WACb,GACD,CAACA,IAEGD,CAAQ,C,8FCRJ,SAASM,EAAQP,GAA0C,IAAzC,GAAEQ,EAAE,MAAEC,EAAK,OAAEC,EAAM,MAAEC,EAAK,SAAEC,GAAUZ,EACnE,MAAME,GAAWC,EAAAA,EAAAA,MAEjB,OACEU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUb,SAAA,EACrBc,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iBAAgBb,UAC3Bc,EAAAA,EAAAA,KAAA,OAAKC,IAAI,oBAAoBC,IAAI,GAAGH,UAAU,0BAElDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBb,SAAA,EAC9Bc,EAAAA,EAAAA,KAAA,UAAQD,UAAU,mBAAmBI,QAASA,IAAMN,EAASJ,GAAIP,SAAC,+EAGlEc,EAAAA,EAAAA,KAAA,UAAQD,UAAU,iBAAiBI,QAASA,IAAMhB,EAAS,SAASM,KAAMP,SAAC,mHAG3Ec,EAAAA,EAAAA,KAAA,UAAQD,UAAU,2BAA2BI,QAASA,IAAMhB,EAAS,UAAUM,KAAMP,SAChFQ,KAELI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeb,SAAA,EAC9Bc,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAAqBb,SAAC,oCACjCY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBb,SAAA,CAAC,qFAAkBU,MACvDE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBb,SAAA,CAAC,mCAAQS,aAK/D,C,sBC5Be,SAASS,EAAYnB,GAAoC,IAAnC,QAAEoB,EAAO,UAAEC,EAAS,SAAEC,GAAUtB,EACjE,OACIe,EAAAA,EAAAA,KAAA,OAAKD,UAAU,eAAcb,UACzBY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOb,SAAA,EAClBc,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAYb,SAAEmB,KAC7BP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBb,SAAA,EAC3Bc,EAAAA,EAAAA,KAAA,UAAQD,UAAU,iBAAiBI,QAASG,EAAUpB,SAAC,gDACvDc,EAAAA,EAAAA,KAAA,UAAQD,UAAU,gBAAgBI,QAASI,EAASrB,SAAC,gDAKzE,CCLe,SAASsB,IACpB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,OAEjDtB,EAAAA,EAAAA,YAAU,KACayB,WACf,IACI,MAAMC,QAAeC,EAAAA,EAAAA,MACrBN,EAASK,EACb,CAAE,MAAOE,GACLC,QAAQC,MAAM,mIAA2BF,EAC7C,GAGJG,EAAY,GACb,IAYH,MAAMC,EAAiB5B,IACnBoB,EAAgBpB,EAAG,EAkBvB,OACIO,EAAAA,EAAAA,KAACsB,EAAAA,EAAc,CAAApC,UACfY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASb,SAAA,EACpBc,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,KACPzB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBb,SAAA,EAC7Bc,EAAAA,EAAAA,KAACwB,EAAAA,EAAO,KACR1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBb,SAAA,CACjB,IAAjBuB,EAAMgB,QACHzB,EAAAA,EAAAA,KAAA,OAAAd,SAAK,qHAELuB,EAAMiB,KAAKC,IACX3B,EAAAA,EAAAA,KAACR,EAAQ,CACLC,GAAIkC,EAAKlC,GAETC,MAAOiC,EAAKjC,MACZC,OAAQgC,EAAKC,YACbhC,MAAO+B,EAAKE,YACZhC,SAAUwB,GAJLM,EAAKlC,MAQA,OAAjBmB,IACGZ,EAAAA,EAAAA,KAACI,EAAY,CACTC,QAAQ,8LACRC,UAvCFQ,UAClB,UACUgB,EAAAA,EAAAA,IAAWlB,GACjBF,GAAUqB,GAASA,EAAKC,QAAQL,GAASA,EAAKlC,KAAOmB,MACrDC,EAAgB,KACpB,CAAE,MAAOI,GACLC,QAAQC,MAAM,iJAA+BF,GAC7CgB,MAAM,qIACV,GAgCoB1B,SA7BH2B,KACjBrB,EAAgB,KAAK,cAoC7B,C","sources":["components/RedirectIfAuth/RedirectIfAuth.js","components/CardsSet/CardsSet.jsx","components/confirmModal/ConfirmModal.js","pages/Library/Library.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst RedirectIfAuth = ({ children }) => {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const token = localStorage.getItem('jwtToken');\n        if (token) {\n            navigate('/library');\n        }\n    }, [navigate]);\n\n    return children;\n};\n\nexport default RedirectIfAuth;\n","import React from 'react'\nimport './CardsSet.scss'\nimport {useNavigate} from \"react-router-dom\";\n\n\nexport default function CardsSet({ id, title, author, count, onDelete }) {\n    const navigate = useNavigate();\n\n    return (\n      <div className=\"cardsset\">\n          <div className=\"cardsset__icon\">\n              <img src=\"/img/cardsSet.svg\" alt=\"\" className=\"cardsset_icon__img\"/>\n          </div>\n          <div className=\"cardsset__content\">\n              <button className=\"cardsset__delete\" onClick={() => onDelete(id)}>\n                  Удалить набор\n              </button>\n              <button className=\"cardsset__edit\" onClick={() => navigate(`/edit/${id}`)}>\n                  Редактировать набор\n              </button>\n              <button className=\"cardsset__content__title\" onClick={() => navigate(`/learn/${id}`)}>\n                  {title}\n              </button>\n              <div className=\"cardsset__row\">\n              <div className=\"cardsset__row__item\">Набор</div>\n                  <div className=\"cardsset__row__item\">Кол-во карточек: {count}</div>\n                  <div className=\"cardsset__row__item\">Автор: {author}</div>\n              </div>\n          </div>\n      </div>\n    );\n}\n\n","import React from 'react';\nimport './ConfirmModal.scss';\n\nexport default function ConfirmModal({ message, onConfirm, onCancel }) {\n    return (\n        <div className=\"confirmmodal\">\n            <div className=\"modal\">\n                <div className=\"modal__msg\">{message}</div>\n                <div className=\"modal__buttons\">\n                    <button className=\"modal__confirm\" onClick={onConfirm}>Удалить</button>\n                    <button className=\"modal__cancel\" onClick={onCancel}>Отмена</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {useEffect, useState } from \"react\";\nimport Header from \"../../components/Header/header\";\nimport SideBar from '../../components/SideBar/SideBar'\nimport \"./Library.scss\"\nimport CardsSet from \"../../components/CardsSet/CardsSet\";\nimport RedirectIfAuth from \"../../components/RedirectIfAuth/RedirectIfAuth\";\nimport {deleteDeck, getUserDecks} from \"../../services/deck\";\nimport ConfirmModal from \"../../components/confirmModal/ConfirmModal\";\n\n\nexport default function Library() {\n    const [decks, setDecks] = useState([]);\n    const [deckToDelete, setDeckToDelete] = useState(null);\n\n    useEffect(() => {\n        const fetchDecks = async () => {\n            try {\n                const result = await getUserDecks();\n                setDecks(result);\n            } catch (err) {\n                console.error('Ошибка загрузки наборов', err);\n            }\n        };\n\n        fetchDecks();\n    }, []);\n\n    // const handleDelete = async (id) => {\n    //     try {\n    //         await deleteDeck(id);\n    //         setDecks((prev) => prev.filter((deck) => deck.id !== id));\n    //     } catch (err) {\n    //         console.error('Ошибка при удалении набора:', err);\n    //         alert('Не удалось удалить набор.');\n    //     }\n    // };\n\n    const requestDelete = (id) => {\n        setDeckToDelete(id);\n    };\n\n    const confirmDelete = async () => {\n        try {\n            await deleteDeck(deckToDelete);\n            setDecks((prev) => prev.filter((deck) => deck.id !== deckToDelete));\n            setDeckToDelete(null);\n        } catch (err) {\n            console.error('Ошибка при удалении набора:', err);\n            alert('Не удалось удалить набор.');\n        }\n    };\n\n    const cancelDelete = () => {\n        setDeckToDelete(null);\n    };\n\n    return(\n        <RedirectIfAuth>\n        <div className=\"library\">\n            <Header />\n            <div className=\"library__content\">\n                <SideBar />\n                <div className=\"library__content__main\">\n                    {decks.length === 0 ? (\n                        <div>У вас пока нет наборов</div>\n                        ) : (\n                        decks.map((deck) => (\n                        <CardsSet\n                            id={deck.id}\n                            key={deck.id}\n                            title={deck.title}\n                            author={deck.author_name}\n                            count={deck.cards_count}\n                            onDelete={requestDelete}\n                        />\n                        ))\n                    )}\n                    {deckToDelete !== null && (\n                        <ConfirmModal\n                            message=\"Вы уверены, что хотите удалить набор?\"\n                            onConfirm={confirmDelete}\n                            onCancel={cancelDelete}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n        </RedirectIfAuth>\n    );\n}"],"names":["_ref","children","navigate","useNavigate","useEffect","localStorage","getItem","CardsSet","id","title","author","count","onDelete","_jsxs","className","_jsx","src","alt","onClick","ConfirmModal","message","onConfirm","onCancel","Library","decks","setDecks","useState","deckToDelete","setDeckToDelete","async","result","getUserDecks","err","console","error","fetchDecks","requestDelete","RedirectIfAuth","Header","SideBar","length","map","deck","author_name","cards_count","deleteDeck","prev","filter","alert","cancelDelete"],"sourceRoot":""}